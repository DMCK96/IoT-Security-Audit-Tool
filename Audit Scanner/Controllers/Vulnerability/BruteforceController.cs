using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Audit_Scanner.Models;
using Audit_Scanner.Vulnerability.Models;
using SaltwaterTaffy.Container;
using MinimalisticTelnet;
using Renci.SshNet;

namespace Audit_Scanner.Controllers.Vulnerability
{
    public class BruteforceController
    {
        private List<CredentialModel> Credentials { get; set; }
        private bool CredentialsLoaded { get; set; }
        private static string _CSVPath = @"..\..\Resources\Credentials.csv";

        public BruteforceController()
        {
            var credentialList = new List<CredentialModel>();

            if (File.Exists(_CSVPath))
            {
                try
                {
                    using (var csvReader = new StreamReader(_CSVPath))
                    {
                        while (!csvReader.EndOfStream)
                        {
                            var line = csvReader.ReadLine();
                            var entries = line.Split(',');

                            var combo = new CredentialModel
                            {
                                Manufacturer = entries[0],
                                Username = entries[1],
                                Password = entries[2]
                            };

                            credentialList.Add(combo);
                        }
                    }
                    
                    Credentials = credentialList.Distinct().ToList();

                    if (Credentials.Any())
                    {
                        CredentialsLoaded = true;
                    }
                }
                catch
                {
                    // Don't need to do anything as CredentialsLoaded defaults to false.
                }
            }
        }

        public CredentialModel BruteforceTelnet(DeviceModel device)
        {
            if (CredentialsLoaded)
            {
                // Only search through credentials where they're global default or manufacturer specific
                foreach (var combo in Credentials.Where(x => x.Manufacturer == ""))
                {
                    //create a new telnet connection
                    TelnetConnection telnet = new TelnetConnection(device.IP, 23);

                    //login with a timeout of 100ms, and show server output
                    var login = telnet.Login(combo.Username, combo.Password, 100);

                    // server output should end with "$" or ">", otherwise the connection failed
                    var response = login.TrimEnd();
                    response = login.Substring(response.Length - 1, 1);

                    if (response != ":")
                    {
                        // At this point we know the connection was successful
                        Console.WriteLine("Bruteforce successful, logged in with the following details:");
                        Console.WriteLine($"Username: {combo.Username}");
                        Console.WriteLine($"Password: {combo.Password}");

                        combo.Successful = true;
                        return combo;
                    }
                }

                // At this point we have tried every credential and none have worked. Device is not vulnerable.
                Console.WriteLine("Bruteforce finished, this device does not have known default credentials");

                // We can return an empty credential model here.
                return new CredentialModel();
            }
            else
            {
                Console.WriteLine(
                    "There was an issue loading credentials, bruteforce cannot continue without credentials.");
            }

            // We can return an empty credential model here.
            return new CredentialModel();
        }

        public CredentialModel BruteforceSSH(DeviceModel device)
        {
            if (CredentialsLoaded)
            {
                foreach (var combo in Credentials)
                {
                    //Create a new SSH Connection
                    var connectionInfo = new ConnectionInfo(device.IP, combo.Username, new PasswordAuthenticationMethod(combo.Username, combo.Password));

                    using (var client = new SshClient(connectionInfo))
                    {
                        try
                        {
                            client.Connect();

                            if (client.IsConnected)
                            {
                                // At this point we know the connection was successful
                                Console.WriteLine("Bruteforce successful, logged in with the following details:");
                                Console.WriteLine($"Username: {combo.Username}");
                                Console.WriteLine($"Password: {combo.Password}");
                            
                                client.Disconnect();

                                combo.Successful = true;
                                return combo;
                            }
                        }
                        catch (Exception ex)
                        {
                            // We can ignore this it just means we couldn't authenticate with that combo.
                        }
                    }
                }
                
                // At this point we have tried every credential and none have worked. Device is not vulnerable.
                Console.WriteLine("Bruteforce finished, this device does not have known default credentials");

                // We can return an empty credential model here.
                return new CredentialModel();
                
            }
            else
            {
                Console.WriteLine(
                    "There was an issue loading credentials, bruteforce cannot continue without credentials.");
            }

            // We can return an empty credential model here.
            return new CredentialModel();
        }
    }
}