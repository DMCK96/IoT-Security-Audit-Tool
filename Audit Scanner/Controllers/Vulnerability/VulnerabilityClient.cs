using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Audit_Scanner.Vulnerability.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RestSharp;
using SaltwaterTaffy.Container;

namespace Audit_Scanner.Controllers.Vulnerability
{
    public class VulnerabilityClient
    {

        private const string _APIKEY = "cucp3O302CEzMWwJ87HA40y8q5f5GDS3";
        
        public List<DeviceModel> ScanVulnerabilities(List<Host> devices)
        {
            RestClient restClient = new RestClient("https://exploits.shodan.io/");
            RestRequest restRequest = new RestRequest("api/search", Method.GET);
            restRequest.AddParameter("key", _APIKEY);

            var vulnerableDevices = new List<DeviceModel>();
            
            foreach (var device in devices)
            {
                var vulnerabilities = new List<VulnerabilityModel>();

                foreach (var port in device.Ports)
                {
                    var product = "";
                    var version = "";
                    
                    if (port.Service.Version == null && port.Service.Product == null)
                    {
                        continue;
                    }

                    if (port.Service.Version != null)
                    {
                        version = port.Service.Version.Substring(0, port.Service.Version.IndexOf(" ", StringComparison.Ordinal) + 1);
                    }
                    
                    restRequest.AddParameter("query", $"{port.Service.Product} {version}");
                    var query = JObject.Parse(restClient.Execute((IRestRequest) restRequest).Content);
                    var array = query.GetValue("matches");
                    
                    foreach(var jObject in array)
                    {
                        var vulnerability = new VulnerabilityModel();
                        vulnerability.Port = port.PortNumber;
                        vulnerability.Service =
                            $"{port.Service.Name} ({port.Service.Product})";
                        vulnerability.Version = port.Service.Version;
                        vulnerability.Description = jObject["description"].ToString();
                        vulnerability.Source = jObject["source"].ToString();
                        vulnerability.CVE = jObject["cve"].ToString();
                        
                        vulnerabilities.Add(vulnerability);
                    }
                }

                if (vulnerabilities.Any())
                {
                    var vulnerableDevice = new DeviceModel();
                    vulnerableDevice.IP = device.Address.ToString();
                    vulnerableDevice.Hostname = Dns.GetHostEntry(device.Address).HostName;
                    vulnerableDevice.PhysicalAddress = device.PhysicalAddress;
                    vulnerableDevice.Vendor = device.Vendor;
                    vulnerableDevice.Vulnerabilities = vulnerabilities;
                    
                    vulnerableDevices.Add(vulnerableDevice);
                }
            }
            
            return vulnerableDevices;
        }
    }
}